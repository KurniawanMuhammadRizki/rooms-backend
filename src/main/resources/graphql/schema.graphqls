type Query {
    hello: String!

    #User Query
    findUserByEmail(email: String!): Users
    findUserById(id: ID!): Users

    #Transaction Query
    transaction(id: ID!): Transaction
    transactionById(id: ID!): Transaction
    transactionsByStatus(status: TransactionStatus!): [Transaction]
    transactionsByUsersId(usersId: ID!): [Transaction]
    transactionsByPropertyId(propertyId: ID!): [Transaction]
    transactions: [Transaction]
    transactionsByBookingCode(bookingCode:String): Transaction

    #PaymentProof
    pendingPaymentProof: [PaymentProof]
    pendingPaymentProofByPropertyId(propertyId: ID!): [PaymentProof]

    #Payment
    paymentByBookingCode(bookingCode: String): Payment

    #Review
    reviewByPropertyId(propertyId: ID!): [Review]
}

type Mutation{
    #Transaction CRUD
    createTransaction(input: TransactionRequest!): String
    cancelTransaction(bookingCode: String): String

    #User CRUD
    userRegister(input : RegisterInput!): String!
    tenantRegister(input : RegisterInput!): String!
    deleteUser (email : String! , password: String! ): String!

    #Authentication
    login (email : String! , password: String!): AuthPayload
    googleLogin (idToken: String!):AuthPayload
    verifyEmail (email: String!):RegisterResponse
    sendResetPasswordLink (email: String!):String!
    resetPassword(email:String!, input:ResetPasswordRequest!): String!

    #Payment
    createPayment(input: PaymentInput!): PaymentResponse!
    createVirtualAccountCode(bookingCode: String!, bank: String!): PaymentResponse
    createPaymentInitial(input: PaymentInitial ): String

    #PaymentProof
    acceptPaymentProof(transactionId: ID!): String
    rejectPaymentProof(transactionId: ID!): String
    addPaymentProof(transactionId:ID!, imgUrl: String): String

    #Review
    createReview(input: ReviewRequest!): String
}

#User
input RegisterInput{
    email : String!
    username: String!
    password: String!
    mobileNumber: String!
}

type RegisterResponse{
    id: ID!
    email: String!
    username: String!
    role: String!
    mobileNumber:String!
}

input ResetPasswordRequest{
    oldPassword: String!
    newPassword: String!
}

enum RoleName {
    TENANT
    USER
}

type AuthPayload {
    token: String!
    role: RoleName!
}

type Users{
    id: ID!
    email: String!
    username: String!
    profilePicture: String
    role: String!
    mobileNumber: String
}

#Transaction and Payment
enum TransactionStatus{
    Success
    Pending
    Cancelled
    Rejected
}

enum TransactionPaymentMethod{
    manual_transfer
    bank_transfer
}

input TransactionRequest{
    usersId: ID!
    propertiesId: ID!
    paymentMethod: TransactionPaymentMethod!
    firstName: String!
    lastName: String!
    mobileNumber: String!
    transactionDetailRequests: TransactionDetailRequest
}

input BankTransfer {
    bank: String
}

input TransactionDetails {
    order_id: String!
    gross_amount: Int!
}

input CustomerDetails{
    first_name: String!
    last_name: String!
    email: String!
    phone: String!
}

input ItemDetail{
    price: Int!
    quantity: Int!
    name: String!
}

input PaymentInput {
    payment_type: String!
    transaction_details: TransactionDetails!
    bank_transfer: BankTransfer!
    customer_details: CustomerDetails!
    item_details: [ItemDetail!]!
}

input TransactionDetailRequest{
    roomId: ID!
    startDate: Date!
    endDate: Date!
}

input PaymentInitial{
    bookingCode: String
    bank: String
    vaNumber: String
}

type Transaction{
    id: ID!
    bookingCode: String
    users: Users!
    properties: Properties!
    finalPrice: Float!
    status: TransactionStatus!
    paymentMethod: TransactionPaymentMethod!
    firstName: String!
    lastName: String!
    mobileNumber: String!
    transactionDetails: [TransactionDetail]
    paymentProofs:[PaymentProof]
}

type PaymentResponse {
    status_code: String
    status_message: String
    transaction_id: String
    order_id: String
    merchant_id: String
    gross_amount: String
    currency: String
    payment_type: String
    transaction_time: String
    transaction_status: String
    fraud_status: String
    va_numbers: [VaNumber]
    expiry_time: String
}

type VaNumber {
    bank: String
    va_number: String
}

type PaymentProof{
    id: ID!
    imgUrl: String!
    transaction: Transaction!
}

type TransactionDetail{
    id:ID
    transaction: Transaction
    rooms: Room
    price: Int
    startDate: Date
    endDate: Date
}

type Payment{
    id:ID
    bookingCode: String
     transactionStatus: String
     bank: String
     vaNumber: String
     grossAmount: Int
}

#Properties
type Properties {
    id: ID!
    users: Users!
    name: String!
    propertyCategories: PropertyCategories!
    description: String!
    checkInTime: Instant!
    checkOutTime: Instant!
    address: String!
    reviews: [Review]
}

type PropertyCategories{
    id: ID!
    name: String!
}

#Room
type Room{
    id: ID!
    name: String
    description: String
    isBooked: Boolean
    isAvailable: Boolean
    roomNumber: String
    price: Float
    capacity: Int
    properties: Properties
    includeBreakfast: Boolean
    bedTypes: BedTypes
    roomArea: Int
}

#BedType
type BedTypes{
    id: ID!
    name: String
}

#Review
type Review{
    id: ID!
    feedback: String
    rating: Int
    reply: String
    transaction: Transaction
    users: Users
    properties: Properties
}

input ReviewRequest{
    bookingCode: String
    propertyId: ID!
    userId: ID!
    feedback: String
    rating: Int
}

#Scalar
scalar Instant
scalar Date
scalar Boolean