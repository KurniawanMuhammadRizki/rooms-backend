type Query {
    hello: String!

    #Transaction Query
    transaction(id: ID!): Transaction

    #User Query
    findUserByEmail(email: String!): Users
    findUserById(id: ID!): Users
}

type Mutation{
    #Transaction CRUD
    createTransaction(input: TransactionRequest!): String

    #User CRUD
    userRegister(input : RegisterInput!): String!
    tenantRegister(input : RegisterInput!): String!
    deleteUser (email : String! , password: String! ): String!

    #Authentication
    login (email : String! , password: String!): AuthPayload
    googleLogin (idToken: String!):AuthPayload
    verifyEmail (email: String!):RegisterResponse
    sendResetPasswordLink (email: String!):String!
    resetPassword(email:String!, input:ResetPasswordRequest!): String!
}

input RegisterInput{
    email : String!
    username: String!
    password: String!
    mobileNumber: String!
}

input TransactionRequest{
    usersId: ID!
    propertiesId: ID!
    finalPrice: Float!
    status: String!
    paymentMethod: String!
}

input ResetPasswordRequest{
    oldPassword: String!
    newPassword: String!
}

type RegisterResponse{
    id: ID!
    email: String!
    username: String!
    role: String!
    mobileNumber:String!
}

type Transaction{
    id: ID!
    users: Users!
    properties: Properties!
    finalPrice: Float!
    status: String!
    paymentMethod: String!
}

enum RoleName {
    TENANT
    USER
}

type AuthPayload {
    token: String!
    role: RoleName!
}


type Users{
    id: ID!
    email: String!
    username: String!
    profilePicture: String
    role: String!
    mobileNumber: String
}

type Properties {
    id: ID!
    users: Users!
    name: String!
    propertyCategories: PropertyCategories!
    description: String!
    checkInTime: Instant!
    checkOutTime: Instant!
    address: String!
}

type PropertyCategories{
    id: ID!
    name: String!
}

scalar Instant